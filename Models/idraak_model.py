# -*- coding: utf-8 -*-
"""Idraak-model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19Z3oLq3PVphmZJbW87urn3SyOICzfjdU

**Connecting to Google Drive to Access and Manipulate Dataset**
"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/gdrive')
# %cd /content/gdrive/MyDrive/Idraak

# Commented out IPython magic to ensure Python compatibility.
# %ls

"""**Importing the Required Libraries**"""

import tensorflow as tf
from keras.preprocessing.image import ImageDataGenerator
import os
os.environ["CUDA_VISIBLE_DEVICES"] = "1"

tf.__version__

"""**1. Data Preprocessing**

**Generation of Images for the Training Set**
"""

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

"""**Generation of Images for the Testing Set**"""

test_datagen = ImageDataGenerator(rescale = 1./255)

"""**Creation of Training Set**"""

training_set = train_datagen.flow_from_directory('dataSet/trainingData',                                
                                                 target_size = (128, 128),
                                                 batch_size = 40,
                                                 color_mode = 'grayscale',                                
                                                 class_mode = 'categorical')

"""**Creation of Test Set**"""

test_set = test_datagen.flow_from_directory('dataSet/testingData',
                                            target_size = (128, 128),                                  
                                            batch_size = 40,        
                                            color_mode = 'grayscale',
                                            class_mode = 'categorical')

"""**2. Building the Convolutional Neural Network**

**Initialization of CNN**
"""

classifier = tf.keras.models.Sequential()

"""**2.1. Convolution**"""

classifier.add(tf.keras.layers.Conv2D(filters=22,
                                     kernel_size=5, 
                                     padding="same", 
                                     activation="relu", 
                                     input_shape=[128, 128, 1]))

"""**2.2. Pooling**"""

classifier.add(tf.keras.layers.MaxPool2D(pool_size=2, 
                                         strides=2, 
                                         padding='valid'))

"""**--Adding of a Second Layer**"""

classifier.add(tf.keras.layers.Conv2D(filters=22, 
                                      kernel_size=5, 
                                      padding="same", 
                                      activation="relu"))

classifier.add(tf.keras.layers.MaxPool2D(pool_size=2, 
                                         strides=2, 
                                         padding='valid'))

# classifier.add(tf.keras.layers.Conv2D(filters=32, 
#                                       kernel_size=4, 
#                                       padding="same", 
#                                       activation="relu"))

# classifier.add(tf.keras.layers.MaxPool2D(pool_size=2, 
#                                          strides=2, 
#                                          padding='valid'))

"""**2.3. Flattening**"""

classifier.add(tf.keras.layers.Flatten())

"""**2.4. Making Full Connection**"""

classifier.add(tf.keras.layers.Dense(units=128, 
                                     activation='relu'))
classifier.add(tf.keras.layers.Dropout(0.40))
classifier.add(tf.keras.layers.Dense(units=96, activation='relu'))
classifier.add(tf.keras.layers.Dropout(0.40))
classifier.add(tf.keras.layers.Dense(units=64, activation='relu'))
classifier.add(tf.keras.layers.Dense(units=39, activation='softmax'))

"""**3. Training**

**Compilation of the CNN**
"""

classifier.compile(optimizer = 'adam', 
                   loss = 'categorical_crossentropy', 
                   metrics = ['accuracy'])

"""**Training of the CNN on the Training set followed by Evaluation on the Test set**

"""

classifier.summary()

classifier.fit(training_set,
                  epochs = 30,
                  validation_data = test_set)

model_json = classifier.to_json()
with open("model_idraak.json", "w") as json_file:
    json_file.write(model_json)
print('Model Has Been Saved')
classifier.save_weights('model_idraak.h5')
print('Weights Have Been Saved')